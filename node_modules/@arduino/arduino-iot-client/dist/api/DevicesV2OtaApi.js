"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoDevicev2Otaupload = _interopRequireDefault(require("../model/ArduinoDevicev2Otaupload"));
var _Devicev2Otabinaryurl = _interopRequireDefault(require("../model/Devicev2Otabinaryurl"));
var _Devicev2Otaurlpyalod = _interopRequireDefault(require("../model/Devicev2Otaurlpyalod"));
var _Error = _interopRequireDefault(require("../model/Error"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* DevicesV2Ota service.
* @module api/DevicesV2OtaApi
* @version 3.0.0
*/
var DevicesV2OtaApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DevicesV2OtaApi. 
  * @alias module:api/DevicesV2OtaApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevicesV2OtaApi(apiClient) {
    _classCallCheck(this, DevicesV2OtaApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * send devices_v2_ota
   * Send a binary url to a device
   * @param {String} id The id of the device
   * @param {module:model/Devicev2Otabinaryurl} devicev2Otabinaryurl 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  return _createClass(DevicesV2OtaApi, [{
    key: "devicesV2OtaSendWithHttpInfo",
    value: function devicesV2OtaSendWithHttpInfo(id, devicev2Otabinaryurl) {
      var postBody = devicev2Otabinaryurl;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2OtaSend");
      }
      // verify the required parameter 'devicev2Otabinaryurl' is set
      if (devicev2Otabinaryurl === undefined || devicev2Otabinaryurl === null) {
        throw new _Error["default"]("Missing the required parameter 'devicev2Otabinaryurl' when calling devicesV2OtaSend");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/devices/{id}/ota', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * send devices_v2_ota
     * Send a binary url to a device
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Otabinaryurl} devicev2Otabinaryurl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "devicesV2OtaSend",
    value: function devicesV2OtaSend(id, devicev2Otabinaryurl) {
      return this.devicesV2OtaSendWithHttpInfo(id, devicev2Otabinaryurl).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * upload devices_v2_ota
     * Upload a binary and send it to a device
     * @param {String} id The id of the device
     * @param {File} otaFile OTA file
     * @param {Object} opts Optional parameters
     * @param {Boolean} [async = true)] If false, wait for the full OTA process, until it gets a result from the device
     * @param {Number} [expireInMins = 10)] Binary expire time in minutes, default 10 mins
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Otaupload} and HTTP response
     */
  }, {
    key: "devicesV2OtaUploadWithHttpInfo",
    value: function devicesV2OtaUploadWithHttpInfo(id, otaFile, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2OtaUpload");
      }
      // verify the required parameter 'otaFile' is set
      if (otaFile === undefined || otaFile === null) {
        throw new _Error["default"]("Missing the required parameter 'otaFile' when calling devicesV2OtaUpload");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'async': opts['async'],
        'expire_in_mins': opts['expireInMins'],
        'ota_file': otaFile
      };
      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/vnd.arduino.devicev2.otaupload+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2Otaupload["default"];
      return this.apiClient.callApi('/iot/v2/devices/{id}/ota', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * upload devices_v2_ota
     * Upload a binary and send it to a device
     * @param {String} id The id of the device
     * @param {File} otaFile OTA file
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.async If false, wait for the full OTA process, until it gets a result from the device (default to true)
     * @param {Number} opts.expireInMins Binary expire time in minutes, default 10 mins (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Otaupload}
     */
  }, {
    key: "devicesV2OtaUpload",
    value: function devicesV2OtaUpload(id, otaFile, opts) {
      return this.devicesV2OtaUploadWithHttpInfo(id, otaFile, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * url devices_v2_ota
     * Generate a url for downloading a binary
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Otaurlpyalod} devicev2Otaurlpyalod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "devicesV2OtaUrlWithHttpInfo",
    value: function devicesV2OtaUrlWithHttpInfo(id, devicev2Otaurlpyalod) {
      var postBody = devicev2Otaurlpyalod;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2OtaUrl");
      }
      // verify the required parameter 'devicev2Otaurlpyalod' is set
      if (devicev2Otaurlpyalod === undefined || devicev2Otaurlpyalod === null) {
        throw new _Error["default"]("Missing the required parameter 'devicev2Otaurlpyalod' when calling devicesV2OtaUrl");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/devices/{id}/ota/url', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * url devices_v2_ota
     * Generate a url for downloading a binary
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Otaurlpyalod} devicev2Otaurlpyalod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "devicesV2OtaUrl",
    value: function devicesV2OtaUrl(id, devicev2Otaurlpyalod) {
      return this.devicesV2OtaUrlWithHttpInfo(id, devicev2Otaurlpyalod).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();