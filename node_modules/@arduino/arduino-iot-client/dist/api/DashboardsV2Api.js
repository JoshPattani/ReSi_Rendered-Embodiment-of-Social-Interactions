"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoDashboardshare = _interopRequireDefault(require("../model/ArduinoDashboardshare"));
var _ArduinoDashboardv = _interopRequireDefault(require("../model/ArduinoDashboardv2"));
var _ArduinoDashboardv2template = _interopRequireDefault(require("../model/ArduinoDashboardv2template"));
var _ArduinoVariableslinks = _interopRequireDefault(require("../model/ArduinoVariableslinks"));
var _Clone = _interopRequireDefault(require("../model/Clone"));
var _Dashboardshare = _interopRequireDefault(require("../model/Dashboardshare"));
var _Dashboardv = _interopRequireDefault(require("../model/Dashboardv2"));
var _Error = _interopRequireDefault(require("../model/Error"));
var _Sharerequest = _interopRequireDefault(require("../model/Sharerequest"));
var _Widgetlink = _interopRequireDefault(require("../model/Widgetlink"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* DashboardsV2 service.
* @module api/DashboardsV2Api
* @version 3.0.0
*/
var DashboardsV2Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DashboardsV2Api. 
  * @alias module:api/DashboardsV2Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DashboardsV2Api(apiClient) {
    _classCallCheck(this, DashboardsV2Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * clone dashboards_v2
   * Clone an existing dashboard
   * @param {String} id The id of the dashboard
   * @param {module:model/Clone} clone Add overrides used when performing a clone of a dashboard
   * @param {Object} opts Optional parameters
   * @param {String} [xOrganization] Organization space identifer (optional)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2} and HTTP response
   */
  return _createClass(DashboardsV2Api, [{
    key: "dashboardsV2CloneWithHttpInfo",
    value: function dashboardsV2CloneWithHttpInfo(id, clone, opts) {
      opts = opts || {};
      var postBody = clone;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Clone");
      }
      // verify the required parameter 'clone' is set
      if (clone === undefined || clone === null) {
        throw new _Error["default"]("Missing the required parameter 'clone' when calling dashboardsV2Clone");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDashboardv["default"];
      return this.apiClient.callApi('/iot/v2/dashboards/{id}/clone', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * clone dashboards_v2
     * Clone an existing dashboard
     * @param {String} id The id of the dashboard
     * @param {module:model/Clone} clone Add overrides used when performing a clone of a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
     */
  }, {
    key: "dashboardsV2Clone",
    value: function dashboardsV2Clone(id, clone, opts) {
      return this.dashboardsV2CloneWithHttpInfo(id, clone, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * create dashboards_v2
     * Create a new dashboard
     * @param {module:model/Dashboardv2} dashboardv2 Describes a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2} and HTTP response
     */
  }, {
    key: "dashboardsV2CreateWithHttpInfo",
    value: function dashboardsV2CreateWithHttpInfo(dashboardv2, opts) {
      opts = opts || {};
      var postBody = dashboardv2;
      // verify the required parameter 'dashboardv2' is set
      if (dashboardv2 === undefined || dashboardv2 === null) {
        throw new _Error["default"]("Missing the required parameter 'dashboardv2' when calling dashboardsV2Create");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDashboardv["default"];
      return this.apiClient.callApi('/iot/v2/dashboards', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create dashboards_v2
     * Create a new dashboard
     * @param {module:model/Dashboardv2} dashboardv2 Describes a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
     */
  }, {
    key: "dashboardsV2Create",
    value: function dashboardsV2Create(dashboardv2, opts) {
      return this.dashboardsV2CreateWithHttpInfo(dashboardv2, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete dashboards_v2
     * Delete a dashboard
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If true, hard delete the thing
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "dashboardsV2DeleteWithHttpInfo",
    value: function dashboardsV2DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Delete");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/dashboards/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete dashboards_v2
     * Delete a dashboard
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "dashboardsV2Delete",
    value: function dashboardsV2Delete(id, opts) {
      return this.dashboardsV2DeleteWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * deleteShare dashboards_v2
     * Delete a user the dashboard has been shared with
     * @param {String} id The id of the dashboard
     * @param {String} userId The id of the user
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "dashboardsV2DeleteShareWithHttpInfo",
    value: function dashboardsV2DeleteShareWithHttpInfo(id, userId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2DeleteShare");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new _Error["default"]("Missing the required parameter 'userId' when calling dashboardsV2DeleteShare");
      }
      var pathParams = {
        'id': id,
        'user_id': userId
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/dashboards/{id}/shares/{user_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * deleteShare dashboards_v2
     * Delete a user the dashboard has been shared with
     * @param {String} id The id of the dashboard
     * @param {String} userId The id of the user
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "dashboardsV2DeleteShare",
    value: function dashboardsV2DeleteShare(id, userId, opts) {
      return this.dashboardsV2DeleteShareWithHttpInfo(id, userId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * link dashboards_v2
     * Link or detach widget variables
     * @param {String} id The id of the dashboard
     * @param {String} widgetId The id of the widget
     * @param {module:model/Widgetlink} widgetlink 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoVariableslinks} and HTTP response
     */
  }, {
    key: "dashboardsV2LinkWithHttpInfo",
    value: function dashboardsV2LinkWithHttpInfo(id, widgetId, widgetlink, opts) {
      opts = opts || {};
      var postBody = widgetlink;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Link");
      }
      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new _Error["default"]("Missing the required parameter 'widgetId' when calling dashboardsV2Link");
      }
      // verify the required parameter 'widgetlink' is set
      if (widgetlink === undefined || widgetlink === null) {
        throw new _Error["default"]("Missing the required parameter 'widgetlink' when calling dashboardsV2Link");
      }
      var pathParams = {
        'id': id,
        'widgetId': widgetId
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.variableslinks+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoVariableslinks["default"];
      return this.apiClient.callApi('/iot/v2/dashboards/{id}/widgets/{widgetId}/variables', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * link dashboards_v2
     * Link or detach widget variables
     * @param {String} id The id of the dashboard
     * @param {String} widgetId The id of the widget
     * @param {module:model/Widgetlink} widgetlink 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoVariableslinks}
     */
  }, {
    key: "dashboardsV2Link",
    value: function dashboardsV2Link(id, widgetId, widgetlink, opts) {
      return this.dashboardsV2LinkWithHttpInfo(id, widgetId, widgetlink, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list dashboards_v2
     * Returns the list of dashboards
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by name of the dashboard. It support like matching.
     * @param {String} [userId] Filter by user_id of the dashboard's owner
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDashboardv2>} and HTTP response
     */
  }, {
    key: "dashboardsV2ListWithHttpInfo",
    value: function dashboardsV2ListWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'name': opts['name'],
        'user_id': opts['userId']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.dashboardv2+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoDashboardv["default"]];
      return this.apiClient.callApi('/iot/v2/dashboards', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list dashboards_v2
     * Returns the list of dashboards
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name of the dashboard. It support like matching.
     * @param {String} opts.userId Filter by user_id of the dashboard's owner
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDashboardv2>}
     */
  }, {
    key: "dashboardsV2List",
    value: function dashboardsV2List(opts) {
      return this.dashboardsV2ListWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * listShares dashboards_v2
     * List of users the dashboard has been shared with
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDashboardshare>} and HTTP response
     */
  }, {
    key: "dashboardsV2ListSharesWithHttpInfo",
    value: function dashboardsV2ListSharesWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2ListShares");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.dashboardshare+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoDashboardshare["default"]];
      return this.apiClient.callApi('/iot/v2/dashboards/{id}/shares', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * listShares dashboards_v2
     * List of users the dashboard has been shared with
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDashboardshare>}
     */
  }, {
    key: "dashboardsV2ListShares",
    value: function dashboardsV2ListShares(id, opts) {
      return this.dashboardsV2ListSharesWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * patch dashboards_v2
     * Updates an existing dashboard field without overwriting the existing data
     * @param {String} id The id of the dashboard
     * @param {module:model/Dashboardv2} dashboardv2 Describes a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2} and HTTP response
     */
  }, {
    key: "dashboardsV2PatchWithHttpInfo",
    value: function dashboardsV2PatchWithHttpInfo(id, dashboardv2, opts) {
      opts = opts || {};
      var postBody = dashboardv2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Patch");
      }
      // verify the required parameter 'dashboardv2' is set
      if (dashboardv2 === undefined || dashboardv2 === null) {
        throw new _Error["default"]("Missing the required parameter 'dashboardv2' when calling dashboardsV2Patch");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDashboardv["default"];
      return this.apiClient.callApi('/iot/v2/dashboards/{id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * patch dashboards_v2
     * Updates an existing dashboard field without overwriting the existing data
     * @param {String} id The id of the dashboard
     * @param {module:model/Dashboardv2} dashboardv2 Describes a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
     */
  }, {
    key: "dashboardsV2Patch",
    value: function dashboardsV2Patch(id, dashboardv2, opts) {
      return this.dashboardsV2PatchWithHttpInfo(id, dashboardv2, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * requestAccess dashboards_v2
     * Request access to a dashboard
     * @param {String} id The id of the dashboard
     * @param {module:model/Sharerequest} sharerequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "dashboardsV2RequestAccessWithHttpInfo",
    value: function dashboardsV2RequestAccessWithHttpInfo(id, sharerequest, opts) {
      opts = opts || {};
      var postBody = sharerequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2RequestAccess");
      }
      // verify the required parameter 'sharerequest' is set
      if (sharerequest === undefined || sharerequest === null) {
        throw new _Error["default"]("Missing the required parameter 'sharerequest' when calling dashboardsV2RequestAccess");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/dashboards/{id}/share_request', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * requestAccess dashboards_v2
     * Request access to a dashboard
     * @param {String} id The id of the dashboard
     * @param {module:model/Sharerequest} sharerequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "dashboardsV2RequestAccess",
    value: function dashboardsV2RequestAccess(id, sharerequest, opts) {
      return this.dashboardsV2RequestAccessWithHttpInfo(id, sharerequest, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * share dashboards_v2
     * Share a dashboard
     * @param {String} id The id of the dashboard
     * @param {module:model/Dashboardshare} dashboardshare 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "dashboardsV2ShareWithHttpInfo",
    value: function dashboardsV2ShareWithHttpInfo(id, dashboardshare, opts) {
      opts = opts || {};
      var postBody = dashboardshare;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Share");
      }
      // verify the required parameter 'dashboardshare' is set
      if (dashboardshare === undefined || dashboardshare === null) {
        throw new _Error["default"]("Missing the required parameter 'dashboardshare' when calling dashboardsV2Share");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/dashboards/{id}/shares', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * share dashboards_v2
     * Share a dashboard
     * @param {String} id The id of the dashboard
     * @param {module:model/Dashboardshare} dashboardshare 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "dashboardsV2Share",
    value: function dashboardsV2Share(id, dashboardshare, opts) {
      return this.dashboardsV2ShareWithHttpInfo(id, dashboardshare, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show dashboards_v2
     * Show a dashboard by id
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2} and HTTP response
     */
  }, {
    key: "dashboardsV2ShowWithHttpInfo",
    value: function dashboardsV2ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Show");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDashboardv["default"];
      return this.apiClient.callApi('/iot/v2/dashboards/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show dashboards_v2
     * Show a dashboard by id
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
     */
  }, {
    key: "dashboardsV2Show",
    value: function dashboardsV2Show(id, opts) {
      return this.dashboardsV2ShowWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * template dashboards_v2
     * Get a template of the dashboard
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2template} and HTTP response
     */
  }, {
    key: "dashboardsV2TemplateWithHttpInfo",
    value: function dashboardsV2TemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Template");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.dashboardv2template+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDashboardv2template["default"];
      return this.apiClient.callApi('/iot/v2/dashboards/{id}/template', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * template dashboards_v2
     * Get a template of the dashboard
     * @param {String} id The id of the dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2template}
     */
  }, {
    key: "dashboardsV2Template",
    value: function dashboardsV2Template(id, opts) {
      return this.dashboardsV2TemplateWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update dashboards_v2
     * Updates an existing dashboard
     * @param {String} id The id of the dashboard
     * @param {module:model/Dashboardv2} dashboardv2 Describes a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2} and HTTP response
     */
  }, {
    key: "dashboardsV2UpdateWithHttpInfo",
    value: function dashboardsV2UpdateWithHttpInfo(id, dashboardv2, opts) {
      opts = opts || {};
      var postBody = dashboardv2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Update");
      }
      // verify the required parameter 'dashboardv2' is set
      if (dashboardv2 === undefined || dashboardv2 === null) {
        throw new _Error["default"]("Missing the required parameter 'dashboardv2' when calling dashboardsV2Update");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.dashboardv2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDashboardv["default"];
      return this.apiClient.callApi('/iot/v2/dashboards/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update dashboards_v2
     * Updates an existing dashboard
     * @param {String} id The id of the dashboard
     * @param {module:model/Dashboardv2} dashboardv2 Describes a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
     */
  }, {
    key: "dashboardsV2Update",
    value: function dashboardsV2Update(id, dashboardv2, opts) {
      return this.dashboardsV2UpdateWithHttpInfo(id, dashboardv2, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();