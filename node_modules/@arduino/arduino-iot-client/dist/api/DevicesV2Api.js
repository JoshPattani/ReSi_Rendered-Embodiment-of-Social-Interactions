"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoDevicev = _interopRequireDefault(require("../model/ArduinoDevicev2"));
var _ArduinoDevicev2EventProperties = _interopRequireDefault(require("../model/ArduinoDevicev2EventProperties"));
var _ArduinoDevicev2StatusEvents = _interopRequireDefault(require("../model/ArduinoDevicev2StatusEvents"));
var _ArduinoDevicev2properties = _interopRequireDefault(require("../model/ArduinoDevicev2properties"));
var _ArduinoDevicev2propertyvalues = _interopRequireDefault(require("../model/ArduinoDevicev2propertyvalues"));
var _CreateDevicesV2Payload = _interopRequireDefault(require("../model/CreateDevicesV2Payload"));
var _Devicev = _interopRequireDefault(require("../model/Devicev2"));
var _Error = _interopRequireDefault(require("../model/Error"));
var _PropertiesValues = _interopRequireDefault(require("../model/PropertiesValues"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* DevicesV2 service.
* @module api/DevicesV2Api
* @version 3.0.0
*/
var DevicesV2Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DevicesV2Api. 
  * @alias module:api/DevicesV2Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevicesV2Api(apiClient) {
    _classCallCheck(this, DevicesV2Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * create devices_v2
   * Creates a new device associated to the user.
   * @param {module:model/CreateDevicesV2Payload} createDevicesV2Payload DeviceV2 describes a device.
   * @param {Object} opts Optional parameters
   * @param {String} [xOrganization] Organization space identifer (optional)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
   */
  return _createClass(DevicesV2Api, [{
    key: "devicesV2CreateWithHttpInfo",
    value: function devicesV2CreateWithHttpInfo(createDevicesV2Payload, opts) {
      opts = opts || {};
      var postBody = createDevicesV2Payload;
      // verify the required parameter 'createDevicesV2Payload' is set
      if (createDevicesV2Payload === undefined || createDevicesV2Payload === null) {
        throw new _Error["default"]("Missing the required parameter 'createDevicesV2Payload' when calling devicesV2Create");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev["default"];
      return this.apiClient.callApi('/iot/v2/devices', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create devices_v2
     * Creates a new device associated to the user.
     * @param {module:model/CreateDevicesV2Payload} createDevicesV2Payload DeviceV2 describes a device.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
     */
  }, {
    key: "devicesV2Create",
    value: function devicesV2Create(createDevicesV2Payload, opts) {
      return this.devicesV2CreateWithHttpInfo(createDevicesV2Payload, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete devices_v2
     * Removes a device associated to the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If true, hard delete the device
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "devicesV2DeleteWithHttpInfo",
    value: function devicesV2DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Delete");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/devices/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete devices_v2
     * Removes a device associated to the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the device (default to false)
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "devicesV2Delete",
    value: function devicesV2Delete(id, opts) {
      return this.devicesV2DeleteWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * getEvents devices_v2
     * GET device events
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The number of events to select
     * @param {String} [start] The time at which to start selecting events
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2EventProperties} and HTTP response
     */
  }, {
    key: "devicesV2GetEventsWithHttpInfo",
    value: function devicesV2GetEventsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2GetEvents");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'limit': opts['limit'],
        'start': opts['start']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2.event.properties+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2EventProperties["default"];
      return this.apiClient.callApi('/iot/v2/devices/{id}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * getEvents devices_v2
     * GET device events
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of events to select
     * @param {String} opts.start The time at which to start selecting events
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2EventProperties}
     */
  }, {
    key: "devicesV2GetEvents",
    value: function devicesV2GetEvents(id, opts) {
      return this.devicesV2GetEventsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * getProperties devices_v2
     * GET device properties
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showDeleted = false)] If true, shows the soft deleted properties
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2properties} and HTTP response
     */
  }, {
    key: "devicesV2GetPropertiesWithHttpInfo",
    value: function devicesV2GetPropertiesWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2GetProperties");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2properties+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2properties["default"];
      return this.apiClient.callApi('/iot/v2/devices/{id}/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * getProperties devices_v2
     * GET device properties
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2properties}
     */
  }, {
    key: "devicesV2GetProperties",
    value: function devicesV2GetProperties(id, opts) {
      return this.devicesV2GetPropertiesWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GetStatusEvents devices_v2
     * GET connection status events
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 30)] The number of events to select
     * @param {String} [start] The time at which to start selecting events
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2StatusEvents} and HTTP response
     */
  }, {
    key: "devicesV2GetStatusEventsWithHttpInfo",
    value: function devicesV2GetStatusEventsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2GetStatusEvents");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'limit': opts['limit'],
        'start': opts['start']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2.status.events+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2StatusEvents["default"];
      return this.apiClient.callApi('/iot/v2/devices/{id}/status', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * GetStatusEvents devices_v2
     * GET connection status events
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of events to select (default to 30)
     * @param {String} opts.start The time at which to start selecting events
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2StatusEvents}
     */
  }, {
    key: "devicesV2GetStatusEvents",
    value: function devicesV2GetStatusEvents(id, opts) {
      return this.devicesV2GetStatusEventsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list devices_v2
     * Returns the list of devices associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} [acrossUserIds = false)] If true, returns all the devices
     * @param {String} [serial] Filter by device serial number
     * @param {Boolean} [showDeleted = false)] If true, shows the soft deleted devices
     * @param {Array.<String>} [tags] Filter by tags
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDevicev2>} and HTTP response
     */
  }, {
    key: "devicesV2ListWithHttpInfo",
    value: function devicesV2ListWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'serial': opts['serial'],
        'show_deleted': opts['showDeleted'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoDevicev["default"]];
      return this.apiClient.callApi('/iot/v2/devices', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list devices_v2
     * Returns the list of devices associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the devices (default to false)
     * @param {String} opts.serial Filter by device serial number
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted devices (default to false)
     * @param {Array.<String>} opts.tags Filter by tags
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDevicev2>}
     */
  }, {
    key: "devicesV2List",
    value: function devicesV2List(opts) {
      return this.devicesV2ListWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show devices_v2
     * Returns the device requested by the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
     */
  }, {
    key: "devicesV2ShowWithHttpInfo",
    value: function devicesV2ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Show");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev["default"];
      return this.apiClient.callApi('/iot/v2/devices/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show devices_v2
     * Returns the device requested by the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
     */
  }, {
    key: "devicesV2Show",
    value: function devicesV2Show(id, opts) {
      return this.devicesV2ShowWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * timeseries devices_v2
     * GET device properties values in a range of time
     * @param {String} id The id of the device
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The number of properties to select
     * @param {String} [start] The time at which to start selecting properties
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2propertyvalues} and HTTP response
     */
  }, {
    key: "devicesV2TimeseriesWithHttpInfo",
    value: function devicesV2TimeseriesWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Timeseries");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling devicesV2Timeseries");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'limit': opts['limit'],
        'start': opts['start']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2propertyvalues+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2propertyvalues["default"];
      return this.apiClient.callApi('/iot/v2/devices/{id}/properties/{pid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * timeseries devices_v2
     * GET device properties values in a range of time
     * @param {String} id The id of the device
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of properties to select
     * @param {String} opts.start The time at which to start selecting properties
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2propertyvalues}
     */
  }, {
    key: "devicesV2Timeseries",
    value: function devicesV2Timeseries(id, pid, opts) {
      return this.devicesV2TimeseriesWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update devices_v2
     * Updates a device associated to the user
     * @param {String} id The id of the device
     * @param {module:model/Devicev2} devicev2 DeviceV2 describes a device.
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
     */
  }, {
    key: "devicesV2UpdateWithHttpInfo",
    value: function devicesV2UpdateWithHttpInfo(id, devicev2, opts) {
      opts = opts || {};
      var postBody = devicev2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Update");
      }
      // verify the required parameter 'devicev2' is set
      if (devicev2 === undefined || devicev2 === null) {
        throw new _Error["default"]("Missing the required parameter 'devicev2' when calling devicesV2Update");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.devicev2+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev["default"];
      return this.apiClient.callApi('/iot/v2/devices/{id}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update devices_v2
     * Updates a device associated to the user
     * @param {String} id The id of the device
     * @param {module:model/Devicev2} devicev2 DeviceV2 describes a device.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
     */
  }, {
    key: "devicesV2Update",
    value: function devicesV2Update(id, devicev2, opts) {
      return this.devicesV2UpdateWithHttpInfo(id, devicev2, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * updateProperties devices_v2
     * Update device properties last values
     * @param {String} id The id of the device
     * @param {module:model/PropertiesValues} propertiesValues 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "devicesV2UpdatePropertiesWithHttpInfo",
    value: function devicesV2UpdatePropertiesWithHttpInfo(id, propertiesValues, opts) {
      opts = opts || {};
      var postBody = propertiesValues;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2UpdateProperties");
      }
      // verify the required parameter 'propertiesValues' is set
      if (propertiesValues === undefined || propertiesValues === null) {
        throw new _Error["default"]("Missing the required parameter 'propertiesValues' when calling devicesV2UpdateProperties");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/devices/{id}/properties', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * updateProperties devices_v2
     * Update device properties last values
     * @param {String} id The id of the device
     * @param {module:model/PropertiesValues} propertiesValues 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "devicesV2UpdateProperties",
    value: function devicesV2UpdateProperties(id, propertiesValues, opts) {
      return this.devicesV2UpdatePropertiesWithHttpInfo(id, propertiesValues, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();