"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoProperty = _interopRequireDefault(require("../model/ArduinoProperty"));
var _Error = _interopRequireDefault(require("../model/Error"));
var _Property = _interopRequireDefault(require("../model/Property"));
var _PropertyStringValue = _interopRequireDefault(require("../model/PropertyStringValue"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* PropertiesV1 service.
* @module api/PropertiesV1Api
* @version 0.0.1
*/
var PropertiesV1Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new PropertiesV1Api. 
  * @alias module:api/PropertiesV1Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PropertiesV1Api(apiClient) {
    _classCallCheck(this, PropertiesV1Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * create properties_v1
   * Creates a new property associated to a thing
   * @param {String} id The id of the thing
   * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
   */
  return _createClass(PropertiesV1Api, [{
    key: "propertiesV1CreateWithHttpInfo",
    value: function propertiesV1CreateWithHttpInfo(id, property) {
      var postBody = property;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Create");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV1Create");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v1/things/{id}/properties', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create properties_v1
     * Creates a new property associated to a thing
     * @param {String} id The id of the thing
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */
  }, {
    key: "propertiesV1Create",
    value: function propertiesV1Create(id, property) {
      return this.propertiesV1CreateWithHttpInfo(id, property).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete properties_v1
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "propertiesV1DeleteWithHttpInfo",
    value: function propertiesV1DeleteWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Delete");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Delete");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete properties_v1
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "propertiesV1Delete",
    value: function propertiesV1Delete(id, pid, opts) {
      return this.propertiesV1DeleteWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list properties_v1
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoProperty>} and HTTP response
     */
  }, {
    key: "propertiesV1ListWithHttpInfo",
    value: function propertiesV1ListWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1List");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.property+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoProperty["default"]];
      return this.apiClient.callApi('/v1/things/{id}/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list properties_v1
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoProperty>}
     */
  }, {
    key: "propertiesV1List",
    value: function propertiesV1List(id, opts) {
      return this.propertiesV1ListWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * send properties_v1
     * Publish a property value to MQTT, as string
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyStringValue} propertyStringValue PropertyStringValuePayload describes a property value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "propertiesV1SendWithHttpInfo",
    value: function propertiesV1SendWithHttpInfo(id, pid, propertyStringValue) {
      var postBody = propertyStringValue;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Send");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Send");
      }
      // verify the required parameter 'propertyStringValue' is set
      if (propertyStringValue === undefined || propertyStringValue === null) {
        throw new _Error["default"]("Missing the required parameter 'propertyStringValue' when calling propertiesV1Send");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}/send', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * send properties_v1
     * Publish a property value to MQTT, as string
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyStringValue} propertyStringValue PropertyStringValuePayload describes a property value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "propertiesV1Send",
    value: function propertiesV1Send(id, pid, propertyStringValue) {
      return this.propertiesV1SendWithHttpInfo(id, pid, propertyStringValue).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show properties_v1
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */
  }, {
    key: "propertiesV1ShowWithHttpInfo",
    value: function propertiesV1ShowWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Show");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Show");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show properties_v1
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */
  }, {
    key: "propertiesV1Show",
    value: function propertiesV1Show(id, pid, opts) {
      return this.propertiesV1ShowWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update properties_v1
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */
  }, {
    key: "propertiesV1UpdateWithHttpInfo",
    value: function propertiesV1UpdateWithHttpInfo(id, pid, property) {
      var postBody = property;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Update");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Update");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV1Update");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update properties_v1
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */
  }, {
    key: "propertiesV1Update",
    value: function propertiesV1Update(id, pid, property) {
      return this.propertiesV1UpdateWithHttpInfo(id, pid, property).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();