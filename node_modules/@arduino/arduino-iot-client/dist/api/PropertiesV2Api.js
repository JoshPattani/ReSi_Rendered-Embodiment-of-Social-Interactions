"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoProperty = _interopRequireDefault(require("../model/ArduinoProperty"));
var _ArduinoTimeseriesmedia = _interopRequireDefault(require("../model/ArduinoTimeseriesmedia"));
var _Error = _interopRequireDefault(require("../model/Error"));
var _Property = _interopRequireDefault(require("../model/Property"));
var _PropertyValue = _interopRequireDefault(require("../model/PropertyValue"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* PropertiesV2 service.
* @module api/PropertiesV2Api
* @version 3.0.0
*/
var PropertiesV2Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new PropertiesV2Api. 
  * @alias module:api/PropertiesV2Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PropertiesV2Api(apiClient) {
    _classCallCheck(this, PropertiesV2Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * create properties_v2
   * Creates a new property associated to a thing
   * @param {String} id The id of the thing
   * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
   * @param {Object} opts Optional parameters
   * @param {String} [xOrganization] Organization space identifer (optional)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
   */
  return _createClass(PropertiesV2Api, [{
    key: "propertiesV2CreateWithHttpInfo",
    value: function propertiesV2CreateWithHttpInfo(id, property, opts) {
      opts = opts || {};
      var postBody = property;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Create");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV2Create");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/iot/v2/things/{id}/properties', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create properties_v2
     * Creates a new property associated to a thing
     * @param {String} id The id of the thing
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */
  }, {
    key: "propertiesV2Create",
    value: function propertiesV2Create(id, property, opts) {
      return this.propertiesV2CreateWithHttpInfo(id, property, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete properties_v2
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If true, hard delete the property
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "propertiesV2DeleteWithHttpInfo",
    value: function propertiesV2DeleteWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Delete");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Delete");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/things/{id}/properties/{pid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete properties_v2
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "propertiesV2Delete",
    value: function propertiesV2Delete(id, pid, opts) {
      return this.propertiesV2DeleteWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list properties_v2
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showDeleted = false)] If true, shows the soft deleted properties
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoProperty>} and HTTP response
     */
  }, {
    key: "propertiesV2ListWithHttpInfo",
    value: function propertiesV2ListWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2List");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.property+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoProperty["default"]];
      return this.apiClient.callApi('/iot/v2/things/{id}/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list properties_v2
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoProperty>}
     */
  }, {
    key: "propertiesV2List",
    value: function propertiesV2List(id, opts) {
      return this.propertiesV2ListWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * publish properties_v2
     * Publish a property value to MQTT
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyValue} propertyValue PropertyValuePayload describes a property value
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "propertiesV2PublishWithHttpInfo",
    value: function propertiesV2PublishWithHttpInfo(id, pid, propertyValue, opts) {
      opts = opts || {};
      var postBody = propertyValue;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Publish");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Publish");
      }
      // verify the required parameter 'propertyValue' is set
      if (propertyValue === undefined || propertyValue === null) {
        throw new _Error["default"]("Missing the required parameter 'propertyValue' when calling propertiesV2Publish");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v2/things/{id}/properties/{pid}/publish', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * publish properties_v2
     * Publish a property value to MQTT
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyValue} propertyValue PropertyValuePayload describes a property value
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "propertiesV2Publish",
    value: function propertiesV2Publish(id, pid, propertyValue, opts) {
      return this.propertiesV2PublishWithHttpInfo(id, pid, propertyValue, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show properties_v2
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showDeleted = false)] If true, shows the soft deleted properties
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */
  }, {
    key: "propertiesV2ShowWithHttpInfo",
    value: function propertiesV2ShowWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Show");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Show");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/iot/v2/things/{id}/properties/{pid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show properties_v2
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */
  }, {
    key: "propertiesV2Show",
    value: function propertiesV2Show(id, pid, opts) {
      return this.propertiesV2ShowWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * timeseries properties_v2
     * Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)
     * @param {String} id The id of the thing
     * @param {String} pid ID of a numerical property
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [aggregation] Samples aggregation statistic. Supported aggregations AVG|MAX|MIN|COUNT|SUM|PCT_99|PCT_95|PCT_90|PCT_75|PCT_50|PCT_15|PCT_5
     * @param {Boolean} [desc = false)] Whether data's ordering (by time) should be descending
     * @param {String} [from] Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @param {Number} [interval] Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
     * @param {String} [to] Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTimeseriesmedia} and HTTP response
     */
  }, {
    key: "propertiesV2TimeseriesWithHttpInfo",
    value: function propertiesV2TimeseriesWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Timeseries");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Timeseries");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'aggregation': opts['aggregation'],
        'desc': opts['desc'],
        'from': opts['from'],
        'interval': opts['interval'],
        'to': opts['to']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.timeseriesmedia+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoTimeseriesmedia["default"];
      return this.apiClient.callApi('/iot/v2/things/{id}/properties/{pid}/timeseries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * timeseries properties_v2
     * Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)
     * @param {String} id The id of the thing
     * @param {String} pid ID of a numerical property
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.aggregation Samples aggregation statistic. Supported aggregations AVG|MAX|MIN|COUNT|SUM|PCT_99|PCT_95|PCT_90|PCT_75|PCT_50|PCT_15|PCT_5
     * @param {Boolean} opts.desc Whether data's ordering (by time) should be descending (default to false)
     * @param {String} opts.from Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @param {Number} opts.interval Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
     * @param {String} opts.to Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTimeseriesmedia}
     */
  }, {
    key: "propertiesV2Timeseries",
    value: function propertiesV2Timeseries(id, pid, opts) {
      return this.propertiesV2TimeseriesWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update properties_v2
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */
  }, {
    key: "propertiesV2UpdateWithHttpInfo",
    value: function propertiesV2UpdateWithHttpInfo(id, pid, property, opts) {
      opts = opts || {};
      var postBody = property;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Update");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Update");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV2Update");
      }
      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/iot/v2/things/{id}/properties/{pid}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update properties_v2
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization Organization space identifer (optional)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */
  }, {
    key: "propertiesV2Update",
    value: function propertiesV2Update(id, pid, property, opts) {
      return this.propertiesV2UpdateWithHttpInfo(id, pid, property, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();