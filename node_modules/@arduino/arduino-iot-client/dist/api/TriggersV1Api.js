"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoAction = _interopRequireDefault(require("../model/ArduinoAction"));
var _ArduinoTrigger = _interopRequireDefault(require("../model/ArduinoTrigger"));
var _ArduinoTriggerTemplate = _interopRequireDefault(require("../model/ArduinoTriggerTemplate"));
var _ArduinoTriggerWithLinkedEntities = _interopRequireDefault(require("../model/ArduinoTriggerWithLinkedEntities"));
var _CreateAction = _interopRequireDefault(require("../model/CreateAction"));
var _Error = _interopRequireDefault(require("../model/Error"));
var _Trigger = _interopRequireDefault(require("../model/Trigger"));
var _UpdateAction = _interopRequireDefault(require("../model/UpdateAction"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* TriggersV1 service.
* @module api/TriggersV1Api
* @version 3.0.0
*/
var TriggersV1Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new TriggersV1Api. 
  * @alias module:api/TriggersV1Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function TriggersV1Api(apiClient) {
    _classCallCheck(this, TriggersV1Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * create actions_v1
   * Creates a new action
   * @param {module:model/CreateAction} createAction 
   * @param {Object} opts Optional parameters
   * @param {String} [xOrganization] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoAction} and HTTP response
   */
  return _createClass(TriggersV1Api, [{
    key: "actionsV1CreateWithHttpInfo",
    value: function actionsV1CreateWithHttpInfo(createAction, opts) {
      opts = opts || {};
      var postBody = createAction;
      // verify the required parameter 'createAction' is set
      if (createAction === undefined || createAction === null) {
        throw new _Error["default"]("Missing the required parameter 'createAction' when calling actionsV1Create");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.action+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoAction["default"];
      return this.apiClient.callApi('/iot/v1/actions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create actions_v1
     * Creates a new action
     * @param {module:model/CreateAction} createAction 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoAction}
     */
  }, {
    key: "actionsV1Create",
    value: function actionsV1Create(createAction, opts) {
      return this.actionsV1CreateWithHttpInfo(createAction, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete actions_v1
     * Removes an action
     * @param {String} id The id of the action
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "actionsV1DeleteWithHttpInfo",
    value: function actionsV1DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling actionsV1Delete");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v1/actions/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete actions_v1
     * Removes an action
     * @param {String} id The id of the action
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "actionsV1Delete",
    value: function actionsV1Delete(id, opts) {
      return this.actionsV1DeleteWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list actions_v1
     * Returns the list of actions
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoAction>} and HTTP response
     */
  }, {
    key: "actionsV1ListWithHttpInfo",
    value: function actionsV1ListWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.action+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoAction["default"]];
      return this.apiClient.callApi('/iot/v1/actions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list actions_v1
     * Returns the list of actions
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoAction>}
     */
  }, {
    key: "actionsV1List",
    value: function actionsV1List(opts) {
      return this.actionsV1ListWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show actions_v1
     * Returns an action
     * @param {String} id The id of the action
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoAction} and HTTP response
     */
  }, {
    key: "actionsV1ShowWithHttpInfo",
    value: function actionsV1ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling actionsV1Show");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.action+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoAction["default"];
      return this.apiClient.callApi('/iot/v1/actions/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show actions_v1
     * Returns an action
     * @param {String} id The id of the action
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoAction}
     */
  }, {
    key: "actionsV1Show",
    value: function actionsV1Show(id, opts) {
      return this.actionsV1ShowWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update actions_v1
     * Updates an action
     * @param {String} id The id of the action
     * @param {module:model/UpdateAction} updateAction 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoAction} and HTTP response
     */
  }, {
    key: "actionsV1UpdateWithHttpInfo",
    value: function actionsV1UpdateWithHttpInfo(id, updateAction, opts) {
      opts = opts || {};
      var postBody = updateAction;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling actionsV1Update");
      }
      // verify the required parameter 'updateAction' is set
      if (updateAction === undefined || updateAction === null) {
        throw new _Error["default"]("Missing the required parameter 'updateAction' when calling actionsV1Update");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.action+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoAction["default"];
      return this.apiClient.callApi('/iot/v1/actions/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update actions_v1
     * Updates an action
     * @param {String} id The id of the action
     * @param {module:model/UpdateAction} updateAction 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoAction}
     */
  }, {
    key: "actionsV1Update",
    value: function actionsV1Update(id, updateAction, opts) {
      return this.actionsV1UpdateWithHttpInfo(id, updateAction, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * create triggers_v1
     * Creates a new trigger
     * @param {module:model/Trigger} trigger 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTrigger} and HTTP response
     */
  }, {
    key: "triggersV1CreateWithHttpInfo",
    value: function triggersV1CreateWithHttpInfo(trigger, opts) {
      opts = opts || {};
      var postBody = trigger;
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new _Error["default"]("Missing the required parameter 'trigger' when calling triggersV1Create");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.trigger+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoTrigger["default"];
      return this.apiClient.callApi('/iot/v1/triggers', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create triggers_v1
     * Creates a new trigger
     * @param {module:model/Trigger} trigger 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTrigger}
     */
  }, {
    key: "triggersV1Create",
    value: function triggersV1Create(trigger, opts) {
      return this.triggersV1CreateWithHttpInfo(trigger, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete triggers_v1
     * Removes a trigger
     * @param {String} id The id of the trigger
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If true, hard delete the trigger
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "triggersV1DeleteWithHttpInfo",
    value: function triggersV1DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling triggersV1Delete");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v1/triggers/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete triggers_v1
     * Removes a trigger
     * @param {String} id The id of the trigger
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the trigger (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "triggersV1Delete",
    value: function triggersV1Delete(id, opts) {
      return this.triggersV1DeleteWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list triggers_v1
     * Returns the list of triggers
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] The id of the device associated with the triggers (mutually exclusive with 'property_id')
     * @param {String} [propertyId] The id of the property associated with the triggers (mutually exclusive with 'device_id')
     * @param {Boolean} [showDeleted = false)] If true, shows the soft deleted triggers
     * @param {module:model/String} [sourceType] The source type of the trigger, could be PROPERTY, DEVICE_INCLUDE or DEVICE_EXCLUDE
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoTrigger>} and HTTP response
     */
  }, {
    key: "triggersV1ListWithHttpInfo",
    value: function triggersV1ListWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'device_id': opts['deviceId'],
        'property_id': opts['propertyId'],
        'show_deleted': opts['showDeleted'],
        'source_type': opts['sourceType']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.trigger+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoTrigger["default"]];
      return this.apiClient.callApi('/iot/v1/triggers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list triggers_v1
     * Returns the list of triggers
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceId The id of the device associated with the triggers (mutually exclusive with 'property_id')
     * @param {String} opts.propertyId The id of the property associated with the triggers (mutually exclusive with 'device_id')
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted triggers (default to false)
     * @param {module:model/String} opts.sourceType The source type of the trigger, could be PROPERTY, DEVICE_INCLUDE or DEVICE_EXCLUDE
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoTrigger>}
     */
  }, {
    key: "triggersV1List",
    value: function triggersV1List(opts) {
      return this.triggersV1ListWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * patch triggers_v1
     * Patch a trigger
     * @param {String} id The id of the trigger
     * @param {module:model/Trigger} trigger 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTrigger} and HTTP response
     */
  }, {
    key: "triggersV1PatchWithHttpInfo",
    value: function triggersV1PatchWithHttpInfo(id, trigger, opts) {
      opts = opts || {};
      var postBody = trigger;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling triggersV1Patch");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new _Error["default"]("Missing the required parameter 'trigger' when calling triggersV1Patch");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.trigger+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoTrigger["default"];
      return this.apiClient.callApi('/iot/v1/triggers/{id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * patch triggers_v1
     * Patch a trigger
     * @param {String} id The id of the trigger
     * @param {module:model/Trigger} trigger 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTrigger}
     */
  }, {
    key: "triggersV1Patch",
    value: function triggersV1Patch(id, trigger, opts) {
      return this.triggersV1PatchWithHttpInfo(id, trigger, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show triggers_v1
     * Returns a trigger
     * @param {String} id The id of the trigger
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTriggerWithLinkedEntities} and HTTP response
     */
  }, {
    key: "triggersV1ShowWithHttpInfo",
    value: function triggersV1ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling triggersV1Show");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.trigger_with_linked_entities+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoTriggerWithLinkedEntities["default"];
      return this.apiClient.callApi('/iot/v1/triggers/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show triggers_v1
     * Returns a trigger
     * @param {String} id The id of the trigger
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTriggerWithLinkedEntities}
     */
  }, {
    key: "triggersV1Show",
    value: function triggersV1Show(id, opts) {
      return this.triggersV1ShowWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * template triggers_v1
     * Extract template from the given trigger
     * @param {String} id The id of the trigger
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTriggerTemplate} and HTTP response
     */
  }, {
    key: "triggersV1TemplateWithHttpInfo",
    value: function triggersV1TemplateWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling triggersV1Template");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.trigger_template+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoTriggerTemplate["default"];
      return this.apiClient.callApi('/iot/v1/triggers/{id}/template', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * template triggers_v1
     * Extract template from the given trigger
     * @param {String} id The id of the trigger
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTriggerTemplate}
     */
  }, {
    key: "triggersV1Template",
    value: function triggersV1Template(id, opts) {
      return this.triggersV1TemplateWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update triggers_v1
     * Updates a trigger
     * @param {String} id The id of the trigger
     * @param {module:model/Trigger} trigger 
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTrigger} and HTTP response
     */
  }, {
    key: "triggersV1UpdateWithHttpInfo",
    value: function triggersV1UpdateWithHttpInfo(id, trigger, opts) {
      opts = opts || {};
      var postBody = trigger;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling triggersV1Update");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new _Error["default"]("Missing the required parameter 'trigger' when calling triggersV1Update");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.trigger+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoTrigger["default"];
      return this.apiClient.callApi('/iot/v1/triggers/{id}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update triggers_v1
     * Updates a trigger
     * @param {String} id The id of the trigger
     * @param {module:model/Trigger} trigger 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTrigger}
     */
  }, {
    key: "triggersV1Update",
    value: function triggersV1Update(id, trigger, opts) {
      return this.triggersV1UpdateWithHttpInfo(id, trigger, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();