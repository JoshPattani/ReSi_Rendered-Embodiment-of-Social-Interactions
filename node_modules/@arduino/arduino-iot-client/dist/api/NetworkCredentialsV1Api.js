"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoCredentialsv = _interopRequireDefault(require("../model/ArduinoCredentialsv1"));
var _Error = _interopRequireDefault(require("../model/Error"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* NetworkCredentialsV1 service.
* @module api/NetworkCredentialsV1Api
* @version 3.0.0
*/
var NetworkCredentialsV1Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new NetworkCredentialsV1Api. 
  * @alias module:api/NetworkCredentialsV1Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function NetworkCredentialsV1Api(apiClient) {
    _classCallCheck(this, NetworkCredentialsV1Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * show network_credentials_v1
   * Show required network credentials depending on device type
   * @param {module:model/String} type Device type
   * @param {Object} opts Optional parameters
   * @param {module:model/String} [connection] Connection used by the device
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoCredentialsv1>} and HTTP response
   */
  return _createClass(NetworkCredentialsV1Api, [{
    key: "networkCredentialsV1ShowWithHttpInfo",
    value: function networkCredentialsV1ShowWithHttpInfo(type, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new _Error["default"]("Missing the required parameter 'type' when calling networkCredentialsV1Show");
      }
      var pathParams = {
        'type': type
      };
      var queryParams = {
        'connection': opts['connection']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.credentialsv1+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoCredentialsv["default"]];
      return this.apiClient.callApi('/iot/v1/network_credentials/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show network_credentials_v1
     * Show required network credentials depending on device type
     * @param {module:model/String} type Device type
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.connection Connection used by the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoCredentialsv1>}
     */
  }, {
    key: "networkCredentialsV1Show",
    value: function networkCredentialsV1Show(type, opts) {
      return this.networkCredentialsV1ShowWithHttpInfo(type, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * showByDevice network_credentials_v1
     * Show available connection types depending on device type
     * @param {module:model/String} type Device type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "networkCredentialsV1ShowByDeviceWithHttpInfo",
    value: function networkCredentialsV1ShowByDeviceWithHttpInfo(type) {
      var postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new _Error["default"]("Missing the required parameter 'type' when calling networkCredentialsV1ShowByDevice");
      }
      var pathParams = {
        'type': type
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/vnd.goa.error+json'];
      var returnType = null;
      return this.apiClient.callApi('/iot/v1/network_credentials/{type}/connections', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * showByDevice network_credentials_v1
     * Show available connection types depending on device type
     * @param {module:model/String} type Device type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "networkCredentialsV1ShowByDevice",
    value: function networkCredentialsV1ShowByDevice(type) {
      return this.networkCredentialsV1ShowByDeviceWithHttpInfo(type).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();